{"version":3,"file":"component---src-pages-services-aem-assets-view-api-details-view-index-md-7c10914df1983700b16e.js","mappings":"wRAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,gBAAc,iBAEtBA,EAAAA,EAAAA,KAAA,0GACAA,EAAAA,EAAAA,KAAA,mCAA6BA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,wBAAsC,4EAC7FH,EAAAA,EAAAA,KAAA,MACE,GAAM,sBAAoB,uBAE5BA,EAAAA,EAAAA,KAAA,2HACQA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,oBAAkC,qFAEpEH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,IAChB,UAAa,4BACb,MAAS,CACP,SAAY,WACZ,QAAW,QACX,WAAc,OACd,YAAe,OACf,SAAY,WACb,YAEDH,EAAAA,EAAAA,KAAA,QAAMG,WAAW,OACf,UAAa,qCACb,MAAS,CACP,cAAiB,SACjB,SAAY,WACZ,OAAU,IACV,KAAQ,IACR,QAAW,QACX,WAAc,oBACd,cAAiB,UAEX,QACdH,EAAAA,EAAAA,KAAA,WAASG,WAAW,QAAM,gBAClBH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,UACnB,OAAU,CAAC,0EAA2E,0EAA2E,2EAA4E,4EAC7O,MAAS,oCACT,KAAQ,eACE,gBACVH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,UACnB,OAAU,CAAC,yEAA0E,yEAA0E,0EAA2E,2EAC1O,MAAS,oCACT,KAAQ,cACE,gBACVH,EAAAA,EAAAA,KAAA,OAAKG,WAAW,UAChB,UAAa,0BACb,IAAO,oEACP,IAAO,aACP,MAAS,aACT,QAAW,OACX,MAAS,CACP,MAAS,OACT,OAAU,OACV,OAAU,IACV,cAAiB,SACjB,SAAY,WACZ,QAAW,IACX,WAAc,eACd,MAAS,UACT,UAAa,+BACb,IAAO,IACP,KAAQ,OAEH,cACC,YAEhBH,EAAAA,EAAAA,KAAA,0MAEAA,EAAAA,EAAAA,KAAA,wEACAA,EAAAA,EAAAA,KAAA,8GACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,iBAAe,kBAEvBA,EAAAA,EAAAA,KAAA,wOAEAA,EAAAA,EAAAA,KAAA,MACE,GAAM,sBAAoB,uBAE5BA,EAAAA,EAAAA,KAAA,gCAA0BA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACpC,KAAQ,cAAY,cACD,qHACuCH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,wBAAsC,8BACxHH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,mBAAiC,gBACjEH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,sCAC7BH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,gBAA0B,qEACnDH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,6BACzBH,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,QAAsB,MAAMH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,UAAwB,2BAC9HH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,MAAoB,MAAMH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,UAAwB,0BAE9HH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,cACzBH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,yFAG9BH,EAAAA,EAAAA,KAAA,MACE,GAAM,2BAAyB,4BAEjCA,EAAAA,EAAAA,KAAA,4EAAsEA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA4B,0BAA0BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,mBAAiC,wBAC3MH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,eAA6B,mCAC7DH,EAAAA,EAAAA,KAAA,iBAAWA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,eAA6B,+LAElEH,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,MAAoB,MAAMH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,UAAwB,gDAC5HH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,WAAyB,MAAMH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,UAAwB,qBACjIH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,SAAuB,MAAMH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,UAAwB,2BAC/HH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,QAAsB,MAAMH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,UAAwB,mBAAmBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC3J,KAAQ,uFAAqF,gCACxD,MACzCH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,cAA4B,MAAMH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,UAAwB,6CACpIH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,uBAAqC,MAAMH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,WAAyB,uEAEhJH,EAAAA,EAAAA,KAAA,MACE,GAAM,wCAAsC,yCAE9CA,EAAAA,EAAAA,KAAA,yNACqFA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,UAAwB,iDAEvIH,EAAAA,EAAAA,KAAA,mEACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,2DAA4DH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,yBAAuC,uGAEjJH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,QAASH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,sBAAoC,6BAA6BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,0BAAwC,8NAE5IH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,wBAAsC,2BAElHH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,w/BA+B9BH,EAAAA,EAAAA,KAAA,iBAAWA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,yBAAuC,6EAA6EH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA4B,+BACjMH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,oBAAkC,eAC1EH,EAAAA,EAAAA,KAAA,uCAAiCA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA4B,mHACtEH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,mBAAiC,4BAA4BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,aAA2B,yLAE7JH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,m+BA8B9BH,EAAAA,EAAAA,KAAA,iBAAWA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,0BAAwC,kFAAkFH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,YAA0B,+BACrMH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,oBAAkC,mMAE1EH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,03CAuClC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://@adobe/uix-docs/./src/pages/services/aem-assets-view/api/details-view/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uix/uix/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"details-view\"\n    }}>{`Details View`}</h1>\n    <p>{`The Details View in the AEM Assets View shows detailed information about the selected asset.`}</p>\n    <p>{`Extensions should use `}<inlineCode parentName=\"p\">{`aem/assets/details/1`}</inlineCode>{` extension point to utilize extensibility services of the Details View.`}</p>\n    <h2 {...{\n      \"id\": \"custom-side-panels\"\n    }}>{`Custom side panels`}</h2>\n    <p>{`The extensibility feature allows adding new panels and corresponding icon buttons to the side rail\nusing the `}<inlineCode parentName=\"p\">{`detailsSidePanel`}</inlineCode>{` namespace. The custom icons appear under the\nlist of the standard panel icons.`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"53.75%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/uix/static/f40348be28368bc40cb4c3a7b19993b4/5530d/side-panel.webp 320w\", \"/uix/static/f40348be28368bc40cb4c3a7b19993b4/0c8fb/side-panel.webp 640w\", \"/uix/static/f40348be28368bc40cb4c3a7b19993b4/94b1e/side-panel.webp 1280w\", \"/uix/static/f40348be28368bc40cb4c3a7b19993b4/6e30a/side-panel.webp 1549w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/uix/static/f40348be28368bc40cb4c3a7b19993b4/dd4a7/side-panel.png 320w\", \"/uix/static/f40348be28368bc40cb4c3a7b19993b4/0f09e/side-panel.png 640w\", \"/uix/static/f40348be28368bc40cb4c3a7b19993b4/bbbf7/side-panel.png 1280w\", \"/uix/static/f40348be28368bc40cb4c3a7b19993b4/4596f/side-panel.png 1549w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/uix/static/f40348be28368bc40cb4c3a7b19993b4/bbbf7/side-panel.png\",\n            \"alt\": \"side panel\",\n            \"title\": \"side panel\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <p>{`The host application fully manages UI interaction, including toggling the panel when user clicks the button,\ndeep linking panel in the URL and auto-hiding the panel when an asset changes.`}</p>\n    <p>{`The host is also responsible for rendering panel's header.`}</p>\n    <p>{`The extension only declares the icon type, panel title and the URL for the custom panel content.`}</p>\n    <h2 {...{\n      \"id\": \"api-reference\"\n    }}>{`API Reference`}</h2>\n    <p>{`This API reference section is future broken down into two parts: the API provided by the AEM Assets View host application\nto the extension and the API provided by the extension to the AEM Assets View host application.`}</p>\n    <h3 {...{\n      \"id\": \"host-api-reference\"\n    }}>{`Host API Reference`}</h3>\n    <p>{`In addition to the `}<a parentName=\"p\" {...{\n        \"href\": \"../commons\"\n      }}>{`Common API`}</a>{` provided by AEM Assets View to all extensions,\nthe host application provides the following API specific to the `}<inlineCode parentName=\"p\">{`aem/assets/details/1`}</inlineCode>{` extension point\nand the `}<inlineCode parentName=\"p\">{`detailSidePanel`}</inlineCode>{` namespace.`}</p>\n    <p><inlineCode parentName=\"p\">{`details.getCurrentResourceInfo()`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Description:`}</strong>{` returns the path and id of the asset shown in the Details View.`}</p>\n    <p><strong parentName=\"p\">{`Return Object Structure`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`path`}</inlineCode>{` (`}<inlineCode parentName=\"li\">{`string`}</inlineCode>{`): Current asset path.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`id`}</inlineCode>{` (`}<inlineCode parentName=\"li\">{`string`}</inlineCode>{`): Current asset id.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { path, id } = await guestConnection.host.details.getCurrentResourceInfo();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"extension-api-reference\"\n    }}>{`Extension API Reference`}</h3>\n    <p>{`The extension definition object passed by the extension to the `}<inlineCode parentName=\"p\">{`register()`}</inlineCode>{` function defines the `}<inlineCode parentName=\"p\">{`detailSidePanel`}</inlineCode>{` namespace\nand the `}<inlineCode parentName=\"p\">{`getPanels()`}</inlineCode>{` method within that namespace.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`getPanels()`}</inlineCode>{` method returns an array of custom panel descriptors that the extension wants to add to the side rail\nof the Details View. Each panel descriptor should include the following properties:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`id`}</inlineCode>{` (`}<inlineCode parentName=\"li\">{`string`}</inlineCode>{`): Panel id, unique within given extension.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`tooltip`}</inlineCode>{` (`}<inlineCode parentName=\"li\">{`string`}</inlineCode>{`): Icon tooltip.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`title`}</inlineCode>{` (`}<inlineCode parentName=\"li\">{`string`}</inlineCode>{`): Custom panel title.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`icon`}</inlineCode>{` (`}<inlineCode parentName=\"li\">{`string`}</inlineCode>{`): Name of the `}<a parentName=\"li\" {...{\n          \"href\": \"https://react-spectrum.adobe.com/react-spectrum/workflow-icons.html#available-icons\"\n        }}>{`React-Spectrum workflow icon`}</a>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`contentUrl`}</inlineCode>{` (`}<inlineCode parentName=\"li\">{`string`}</inlineCode>{`): Relative path to the panel's content.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`reloadOnThemeChange`}</inlineCode>{` (`}<inlineCode parentName=\"li\">{`boolean`}</inlineCode>{`): Whether to reload custom panel when application theme changes.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example-of-adding-custom-side-panels\"\n    }}>{`Example of adding custom side panels`}</h2>\n    <p>{`These code snippets demonstrate how to create a custom side panel using UIX SDK library and add it to the side rail\nof the Details View. (The examples below serve illustrative purposes thus omit certain `}<inlineCode parentName=\"p\">{`import`}</inlineCode>{` statements and other\nnon-important parts.)`}</p>\n    <p>{`Here, the main application code defines three routes:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`the first two are the default routes which trigger the `}<inlineCode parentName=\"li\">{`ExtensionRegistration`}</inlineCode>{` component responsible for initial extension registration\nwithin the AEM Assets View application.`}</li>\n      <li parentName=\"ul\">{`the `}<inlineCode parentName=\"li\">{`extension-template`}</inlineCode>{` route which invokes the `}<inlineCode parentName=\"li\">{`PanelExtensionTemplate`}</inlineCode>{` component responsible for rendering the\ncustom panel content. This route gets called by the AEM Assets View application when the user clicks the custom panel icon.\nDuring the registration the extension will specify `}<inlineCode parentName=\"li\">{`/#extension-template`}</inlineCode>{` as content location.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function App() {\n    return (\n        <Router>\n            <ErrorBoundary onError={onError} FallbackComponent={fallbackComponent}>\n                <Routes>\n                    <Route index element={<ExtensionRegistration />} />\n                    <Route exact path=\"index.html\" element={<ExtensionRegistration />} />\n                    <Route path=\"extension-template\" element={<PanelExtensionTemplate />} />\n                    // YOUR CUSTOM ROUTES SHOULD BE HERE\n                </Routes>\n            </ErrorBoundary>\n        </Router>\n    );\n\n    function onError(e, componentStack) {}\n\n    function fallbackComponent({ componentStack, error }) {\n        return (\n            <React.Fragment>\n                <h1 style={{ textAlign: 'center', marginTop: '20px' }}>\n                    Extension rendering error\n                </h1>\n                <pre>{componentStack + '\\\\n' + error.message}</pre>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ExtensionRegistration`}</inlineCode>{` component initializes the extension registration process by calling the `}<inlineCode parentName=\"p\">{`register()`}</inlineCode>{` function\nprovided by the `}<inlineCode parentName=\"p\">{`@adobe/uix-guest`}</inlineCode>{` library. `}</p>\n    <p>{`The objects passed to the `}<inlineCode parentName=\"p\">{`register()`}</inlineCode>{` function describe the extension and its capabilities. In particular, it declares that the\nextension uses the `}<inlineCode parentName=\"p\">{`detailSidePanel`}</inlineCode>{` namespace and declares `}<inlineCode parentName=\"p\">{`getPanels`}</inlineCode>{` method which returns an array of custom panels.\nThe custom panel, among other properties, specifies the icon's tooltip, the custom panel title and the route to the panel content.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function ExtensionRegistration() {\n    const init = async () => {\n        const guestConnection = await register({\n            id: extensionId,\n            methods: {\n                detailSidePanel: {\n                    getPanels() {\n                        return [\n                            {\n                                'id': 'extension-template',\n                                'tooltip': 'Extension Template',\n                                'icon': 'Extension',\n                                'title': 'Extension Template',\n                                'contentUrl': '/#extension-template',\n                                'reloadOnThemeChange': 'true',\n                            },\n                        ];\n                    },\n                },\n            },\n        });\n    };\n    init().catch(console.error);\n\n    return <Text>IFrame for integration with Host (AEM Assets View)...</Text>;\n}\n\nexport default ExtensionRegistration;\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`PanelExtensionTemplate`}</inlineCode>{` component is responsible for rendering the custom panel content. It uses the `}<inlineCode parentName=\"p\">{`attach()`}</inlineCode>{` function\nprovided by the `}<inlineCode parentName=\"p\">{`@adobe/uix-guest`}</inlineCode>{` library to establish a connection with the AEM Assets View and uses this connection object to\nrender a toast message within the AEM Assets View when the user clicks the \"Click me!\" button.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default function PanelExtensionTemplate() {\n    // Fields\n    const [guestConnection, setGuestConnection] = useState();\n    const [colorScheme, setColorScheme] = useState('light');\n\n    useEffect(() => {\n        (async () => {\n            const guestConnection = await attach({ id: extensionId });\n            setGuestConnection(guestConnection);\n\n            const { colorScheme } = await guestConnection.host.theme.getThemeInfo();\n            setColorScheme(colorScheme);\n        })()\n    }, []);\n\n    function displayToast(variant, message) {\n        guestConnection.host.toast.display({ variant, message });\n    }\n\n    return (\n        <Provider theme={defaultTheme} colorScheme={colorScheme} height={'100vh'}>\n            <View backgroundColor=\"gray-50\">\n                <View padding=\"size-300\">\n                    <Text>Please visit <Link href=\"https://developer.adobe.com/uix/docs/\">UI Extensibility documentation</Link> to get started.</Text>\n\n                    <Flex justifyContent=\"center\" marginTop=\"size-400\">\n                        <ButtonGroup>\n                            <Button variant=\"primary\" onPress={() => displayToast('neutral', 'Message from the Extension')}>Click me!</Button>\n                        </ButtonGroup>\n                    </Flex>\n                </View>\n            </View>\n        </Provider>\n    );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}