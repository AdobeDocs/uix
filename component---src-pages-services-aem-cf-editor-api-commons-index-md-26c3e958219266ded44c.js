"use strict";(self.webpackChunk_adobe_uix_docs=self.webpackChunk_adobe_uix_docs||[]).push([[5072],{14559:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return d},default:function(){return u}});var a=t(87462),o=t(45987),i=(t(15007),t(64983)),s=t(91515);const r=["components"],d={},l=(m="InlineAlert",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",e)});var m;const c={_frontmatter:d},p=s.Z;function u(e){let{components:n}=e,t=(0,o.Z)(e,r);return(0,i.mdx)(p,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"common-concepts-in-creating-extensions"},"Common Concepts in Creating Extensions"),(0,i.mdx)("p",null,"Learn about common concepts, extension registration, and methods that can be used in any extension."),(0,i.mdx)("h2",{id:"extension-registration"},"Extension Registration"),(0,i.mdx)("p",null,"Interaction between UI Extension and Content Fragments console starts with the initialization process that includes extension's capabilities registration so Content Fragments console knows when to invoke the extension. Registration is done by ",(0,i.mdx)("inlineCode",{parentName:"p"},"register")," method provided by ",(0,i.mdx)("inlineCode",{parentName:"p"},"@adobe/uix-guest")," library. This asynchronous method takes single object that describes extension and returns object representing connection to Content Fragments console."),(0,i.mdx)("p",null,"Method ",(0,i.mdx)("inlineCode",{parentName:"p"},"register")," should be invoked after extension initialization page is loaded."),(0,i.mdx)("p",null,"Extension registration data must include:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"id")," - string with random extension identifier. This identifier useful for debugging of interaction between Content Fragments console and extension and needed if extension provides custom UI."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"methods")," - objects with extension code exposed to Content Fragments console. All methods are grouped into namespaces that represents extension points provided by Content Fragments console.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import { register } from "@adobe/uix-guest";\n\n// ...\n\nconst guestConnection = await register({\n    id: "extension-id",\n    methods: {\n        // ...\n    }\n});\n')),(0,i.mdx)("h2",{id:"extension-ui"},"Extension UI"),(0,i.mdx)("p",null,"For use-cases when UI Extension provides any data handling or send data to remote service ",(0,i.mdx)("inlineCode",{parentName:"p"},"register")," is the only method that is expected to be invoked."),(0,i.mdx)("p",null,"If UI Extension implements own UI it should be provided as separate page. If this UI requires data from Content Fragments console or need to invoke any logic it should establish connection with ",(0,i.mdx)("inlineCode",{parentName:"p"},"attach")," method."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import { attach } from "@adobe/uix-guest";\n\nconst guestConnection = await attach({ id: "id-used-during-extension-registration" });\n')),(0,i.mdx)(l,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"At the moment ",(0,i.mdx)("a",{parentName:"p",href:"#modal"},"Modal")," is the only way for extension to provide custom UI."),(0,i.mdx)("h2",{id:"connection-object"},"Connection Object"),(0,i.mdx)("p",null,"Both ",(0,i.mdx)("inlineCode",{parentName:"p"},"register")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"attach")," function of ",(0,i.mdx)("inlineCode",{parentName:"p"},"@adobe/uix-guest")," returns same connection object that has ",(0,i.mdx)("inlineCode",{parentName:"p"},"host")," property and expose API of Content Fragments console exposed for UI Extensions."),(0,i.mdx)("h3",{id:"progress-circle"},"Progress Circle"),(0,i.mdx)("p",null,"A progress circle shows the presence of background system operation in a visual way. The progress circle also blocks all user interactions with the UI."),(0,i.mdx)("p",null,(0,i.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1280px"}},"\n      ",(0,i.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"38.4375%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,i.mdx)("picture",{parentName:"span"},"\n          ",(0,i.mdx)("source",{parentName:"picture",srcSet:["/uix/static/309fc08b829311b44ae1ece316e6451f/5530d/progress-circle.webp 320w","/uix/static/309fc08b829311b44ae1ece316e6451f/0c8fb/progress-circle.webp 640w","/uix/static/309fc08b829311b44ae1ece316e6451f/94b1e/progress-circle.webp 1280w","/uix/static/309fc08b829311b44ae1ece316e6451f/0b34d/progress-circle.webp 1920w","/uix/static/309fc08b829311b44ae1ece316e6451f/d5269/progress-circle.webp 2560w","/uix/static/309fc08b829311b44ae1ece316e6451f/0065e/progress-circle.webp 3568w"],sizes:"(max-width: 1280px) 100vw, 1280px",type:"image/webp"}),"\n          ",(0,i.mdx)("source",{parentName:"picture",srcSet:["/uix/static/309fc08b829311b44ae1ece316e6451f/dd4a7/progress-circle.png 320w","/uix/static/309fc08b829311b44ae1ece316e6451f/0f09e/progress-circle.png 640w","/uix/static/309fc08b829311b44ae1ece316e6451f/bbbf7/progress-circle.png 1280w","/uix/static/309fc08b829311b44ae1ece316e6451f/ac7a9/progress-circle.png 1920w","/uix/static/309fc08b829311b44ae1ece316e6451f/c7a69/progress-circle.png 2560w","/uix/static/309fc08b829311b44ae1ece316e6451f/adfc3/progress-circle.png 3568w"],sizes:"(max-width: 1280px) 100vw, 1280px",type:"image/png"}),"\n          ",(0,i.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/uix/static/309fc08b829311b44ae1ece316e6451f/bbbf7/progress-circle.png",alt:"Progress Circle",title:"Progress Circle",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,i.mdx)("p",null,"The API consist of two methods ",(0,i.mdx)("inlineCode",{parentName:"p"},"start")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"stop")," which allow to start the progress circle or stop it respectively. An example below introduces a button that starts the progress circle and stops it in 5 seconds."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'const guestConnection = await register({\n  id: "aem-headless-ui-ext-examples-progress-circle",\n  methods: {\n    headerMenu: {\n      getButtons() {\n        return [\n          {\n            id: "my.company.progress-circle-action",\n            label: "Start circle",\n            icon: \'OpenIn\',\n            onClick: () => {\n              guestConnection.host.progressCircle.start();\n              setTimeout(() => guestConnection.host.progressCircle.stop(), 5000);\n            },\n          },\n        ];\n      },\n    },\n  },\n});\n')),(0,i.mdx)("p",null,"Please keep in mind, multiple extensions may use the progress circle simultaneously. The progress circle will not disappear until all involved extensions call ",(0,i.mdx)("inlineCode",{parentName:"p"},"stop")," method."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"API Reference")),(0,i.mdx)("table",null,(0,i.mdx)("thead",{parentName:"table"},(0,i.mdx)("tr",{parentName:"thead"},(0,i.mdx)("th",{parentName:"tr",align:null},"Method"),(0,i.mdx)("th",{parentName:"tr",align:null},"Arguments"),(0,i.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,i.mdx)("tbody",{parentName:"table"},(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"start"),(0,i.mdx)("td",{parentName:"tr",align:null}),(0,i.mdx)("td",{parentName:"tr",align:null},"Shows progress circle and blocks all user input")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"stop"),(0,i.mdx)("td",{parentName:"tr",align:null}),(0,i.mdx)("td",{parentName:"tr",align:null},"Stops progress circle and release user input if all other extensions stopped their progress circles")))),(0,i.mdx)("h3",{id:"toaster"},"Toaster"),(0,i.mdx)("p",null,"Content Fragments console provides an API for showing small informational messages (toasts) in the bottom part of the UI. These messages are meant to communicate errors, confirm actions and show other notifications to the user. Toaster API is defined in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"toaster")," namespace."),(0,i.mdx)("p",null,"In order to display a message an extension must call ",(0,i.mdx)("inlineCode",{parentName:"p"},"display")," method in ",(0,i.mdx)("inlineCode",{parentName:"p"},"toaster")," namespace."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import { register } from "@adobe/uix-guest";\n\nconst guestConnection = await register({\n    id: "my.company.extension-with-taster",\n    {\n        //...\n    }\n}\n\nguestConnection.host.toaster.display({\n    variant: "positive",\n    message: "Toast displayed successfully!",\n})\n')),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"API Reference")),(0,i.mdx)("table",null,(0,i.mdx)("thead",{parentName:"table"},(0,i.mdx)("tr",{parentName:"thead"},(0,i.mdx)("th",{parentName:"tr",align:null},"Field"),(0,i.mdx)("th",{parentName:"tr",align:null},"Type"),(0,i.mdx)("th",{parentName:"tr",align:null},"Required"),(0,i.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,i.mdx)("tbody",{parentName:"table"},(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"variant"),(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"neutral")," ",(0,i.mdx)("br",null)," ",(0,i.mdx)("inlineCode",{parentName:"td"},"info")," ",(0,i.mdx)("br",null)," ",(0,i.mdx)("inlineCode",{parentName:"td"},"negative")," ",(0,i.mdx)("br",null)," ",(0,i.mdx)("inlineCode",{parentName:"td"},"positive")),(0,i.mdx)("td",{parentName:"tr",align:null},"✔️"),(0,i.mdx)("td",{parentName:"tr",align:null},"Defines type of the message, based on this parameter message will be shown in a different color and different icon")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"message"),(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"string")),(0,i.mdx)("td",{parentName:"tr",align:null},"✔️"),(0,i.mdx)("td",{parentName:"tr",align:null},"Text of the message")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"timeout"),(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"number")),(0,i.mdx)("td",{parentName:"tr",align:null}),(0,i.mdx)("td",{parentName:"tr",align:null},"An optional timeout in milliseconds when message should automatically disappear. If not set, default timeout value will be used.")))),(0,i.mdx)("h3",{id:"shared-context"},"Shared Context"),(0,i.mdx)("p",null,"In order to empower UI Extensions perform useful actions Content Fragments Editor provides access to data that simplifies user authentication and usage of AEM API. Such data may be accessed through ",(0,i.mdx)("inlineCode",{parentName:"p"},"sharedContext")," property of ",(0,i.mdx)("inlineCode",{parentName:"p"},"host"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import { attach } from "@adobe/uix-guest";\n\nconst guestConnection = await attach({\n    id: "my-id"\n}\nconst context = guestConnection.sharedContext;\nconst aemHost = context.get("aemHost");\n')),(0,i.mdx)("p",null,"Available shared context data:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'{\n    aemHost: string, // hostname of connected AEM environment\n    locale: string, // locale of current user\n    theme: "light" | "dark", // color schema selected by current user\n    auth: {\n        imsOrg: string, // current IMS organization\n        imsToken: string, // user token\n        apiKey: string, // API key to use for requests to Adobe services\n        imsOrgName: string, // Human readable organization name\n        authScheme: "Bearer" // Auth schema that should be used during communication with Adobe services\n    }\n}\n')),(0,i.mdx)("h3",{id:"get-content-fragment"},"Get Content Fragment"),(0,i.mdx)("p",null,"You can access data about the Content Fragment that is currently being edited by using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"host.contentFragment.getContentFragment()")," method in an extension:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import { register } from "@adobe/uix-guest";\n// ...\nconst init = async () => {\n    const registrationConfig = {\n        id: extensionId,\n        methods: {\n            headerMenu: {\n                async getButtons() {\n                    return [\n                        {\n                            id: "get-active-cf",\n                            label: "Get Active CF / Canvas",\n                            onClick: async () => {\n                                // Get Content Fragment\n                                const contentFragment = await guestConnection.host.contentFragment.getContentFragment();\n                            },\n                        },\n                    ];\n                },\n            },\n        },\n    };\n    const guestConnection = await register(registrationConfig);\n}\ninit().catch(console.error)\n')),(0,i.mdx)("h4",{id:"result-object"},"Result object"),(0,i.mdx)("p",null,"This ",(0,i.mdx)("inlineCode",{parentName:"p"},"contentFragment")," object holds the last received state from AEM instance. It does not contain recent changes from the Editor (no edits from the canvas, sidebar or changes to variations) ",(0,i.mdx)("strong",{parentName:"p"},"until they are successfully saved")," in AEM."),(0,i.mdx)(l,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"The API is experimental and might change or disappear at any time. The result object structure is part of a low level API that could be changed in the future."))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-services-aem-cf-editor-api-commons-index-md-26c3e958219266ded44c.js.map