{"version":3,"file":"component---src-pages-services-aem-universal-editor-api-events-index-md-f6dc0202e8a26af6a5b9.js","mappings":"yRAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,uBAAqB,wBAE7BA,EAAAA,EAAAA,KAAA,oPACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,yBAAuB,wBAE/BA,EAAAA,EAAAA,KAAA,2KACYA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACtB,KAAQ,uIAAqI,YAC5H,mCACrBH,EAAAA,EAAAA,KAAA,wEAAkEA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,iBAA+B,YAC3HH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,gTAW9BH,EAAAA,EAAAA,KAAA,uGAAiGA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,iBAA+B,uDACnHH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,iBAA+B,YAChGH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,+RAYlC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://@adobe/uix-docs/./src/pages/services/aem-universal-editor/api/events/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uix/uix/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"working-with-events\"\n    }}>{`Working with Events`}</h1>\n    <p>{`The Universal Editor sends defined events to remote applications. In case the remote application has no custom event listener for the sent event, a fallback event listener provided by the universal-editor-cors package is executed.`}</p>\n    <h3 {...{\n      \"id\": \"working-with-events-1\"\n    }}>{`Working with Events`}</h3>\n    <p>{`The Universal Editor offers a list of events that extensions can subscribe to in order to respond to changes in content or the user interface.\nRefer to this `}<a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/en/docs/experience-manager-cloud-service/content/implementing/developing/universal-editor/events\"\n      }}>{`document`}</a>{` for the available event list.`}</p>\n    <p>{`For instance, here's an example of how to subscribe to the `}<inlineCode parentName=\"p\">{`aue:ui-select`}</inlineCode>{` event:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\n    useEffect(() => {\n        (async () => {\n            const guestConnection = await attach({id: extensionId});\n            ...\n            await guestConnection.host.remoteApp.addEventListener('aue:ui-select', console.log('event recieved!'));\n            ...\n        })();\n    }, []);\n`}</code></pre>\n    <p>{`If your business logic requires sending an event to the Universal Editor, you can use the `}<inlineCode parentName=\"p\">{`dispatchEvent`}</inlineCode>{` method.\nHere's an example of how to dispatch the `}<inlineCode parentName=\"p\">{`aue:ui-select`}</inlineCode>{` event:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`    useEffect(() => {\n        (async () => {\n            const guestConnection = await attach({id: extensionId});\n            ...\n            await guestConnection.host.remoteApp.dispatchEvent('aue:ui-select', {data: 'some data'});\n            ...\n        })();\n    }, []);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}