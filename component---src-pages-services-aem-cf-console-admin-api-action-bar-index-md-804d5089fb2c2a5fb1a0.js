"use strict";(self.webpackChunk_adobe_uix_docs=self.webpackChunk_adobe_uix_docs||[]).push([[6843],{90038:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return o},default:function(){return c}});var a=n(87462),l=n(45987),i=(n(15007),n(64983)),r=n(91515);const d=["components"],o={},m={_frontmatter:o},s=r.Z;function c(e){let{components:t}=e,n=(0,l.Z)(e,d);return(0,i.mdx)(s,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"action-bar"},"Action Bar"),(0,i.mdx)("p",null,"The Action Bar is an area above the content fragment list in the ",(0,i.mdx)("a",{parentName:"p",href:"../../"},"Content Fragments Console")," that displays action items that can be executed on selected content fragments. These actions may include editing, deleting, exporting, cloning, or publishing content fragments, and the Action Bar appears over the ",(0,i.mdx)("a",{parentName:"p",href:"../header-menu"},"Header Menu")," when one or multiple content fragments are selected."),(0,i.mdx)("p",null,(0,i.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1000px"}},"\n      ",(0,i.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"58.12500000000001%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,i.mdx)("picture",{parentName:"span"},"\n          ",(0,i.mdx)("source",{parentName:"picture",srcSet:["/uix/static/4a8493658edded4712e63e3555cf342a/5530d/action-bar.webp 320w","/uix/static/4a8493658edded4712e63e3555cf342a/0c8fb/action-bar.webp 640w","/uix/static/4a8493658edded4712e63e3555cf342a/80c60/action-bar.webp 1000w"],sizes:"(max-width: 1000px) 100vw, 1000px",type:"image/webp"}),"\n          ",(0,i.mdx)("source",{parentName:"picture",srcSet:["/uix/static/4a8493658edded4712e63e3555cf342a/dd4a7/action-bar.png 320w","/uix/static/4a8493658edded4712e63e3555cf342a/0f09e/action-bar.png 640w","/uix/static/4a8493658edded4712e63e3555cf342a/1263b/action-bar.png 1000w"],sizes:"(max-width: 1000px) 100vw, 1000px",type:"image/png"}),"\n          ",(0,i.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/uix/static/4a8493658edded4712e63e3555cf342a/1263b/action-bar.png",alt:"Action Bar",title:"Action Bar",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,i.mdx)("p",null,"Action bar can be customized via methods defined in ",(0,i.mdx)("inlineCode",{parentName:"p"},"actionBar")," namespace."),(0,i.mdx)("p",null,"You have the ability to:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"create multiple buttons from single extension;"),(0,i.mdx)("li",{parentName:"ul"},"implement drop-down menu buttons;"),(0,i.mdx)("li",{parentName:"ul"},"use any ",(0,i.mdx)("a",{parentName:"li",href:"https://react-spectrum.adobe.com/react-spectrum/workflow-icons.html#available-icons"},"icon")," from React Spectrum;"),(0,i.mdx)("li",{parentName:"ul"},"delete default or added by extension buttons;")),(0,i.mdx)("h2",{id:"custom-button-with-callback"},"Custom button with callback"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import { register } from "@adobe/uix-guest";\n\n// ...\n\nconst guestConnection = await register({\n    id: "my.company.extension-with-action-bar-button",\n    methods: {\n        actionBar: {\n            getButtons() {\n                return [\n                    {\n                        id: "my.company.export-button",\n                        label: "Export",\n                        icon: \'Export\',\n                        onClick: (selections) => {\n                            console.log(\'Export button has been pressed\', selections);\n                        },\n                    },\n                ];\n            },\n        },\n    },\n});\n')),(0,i.mdx)("p",null,"The callback is invoked when user clicks on the button and receives list of content fragments selected in the list."),(0,i.mdx)("h2",{id:"custom-button-with-sub-menu"},"Custom button with sub menu"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"import { register } from \"@adobe/uix-guest\";\n\n// ...\n\nconst guestConnection = await register({\n    id: \"my.company.extension-with-action-bar-button\",\n    methods: {\n        actionBar: {\n            getButtons() {\n                return [\n                    {\n                        id: \"my.company.export-button\",\n                        label: \"Export\",\n                        icon: 'Export',\n                        subItems: [\n                            {\n                                id: 'xml',\n                                label: 'XML',\n                                onClick: (selections) => {\n                                    console.log('Export in XML button has been pressed.', selections);\n                                    // ...\n                                },\n                            },\n                            {\n                                id: 'csv',\n                                label: 'CSV',\n                                onClick: (selections) => {\n                                    console.log('Export in CSV button has been pressed.', selections);\n                                    // ...\n                                },\n                            },\n                        ],\n                    },\n                ];\n            },\n        },\n    },\n});\n")),(0,i.mdx)("p",null,"The callback is invoked when user clicks on the button and receives list of content fragments selected in the list."),(0,i.mdx)("h2",{id:"delete-button"},"Delete button"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import { register } from "@adobe/uix-guest";\n\n// ...\n\nconst guestConnection = await register({\n    id: "my.company.extension-with-action-bar-button",\n    methods: {\n        actionBar: {\n            deleteButtons() {\n                return [\n                    {\n                        //The "id" property is the "data-id" property of html button element.\n                        id: "my.company.export-button"\n                    },\n                ];\n            },\n        },\n    },\n});\n')),(0,i.mdx)("h2",{id:"api-reference"},"API Reference"),(0,i.mdx)("h3",{id:"button-api"},"Button API"),(0,i.mdx)("table",null,(0,i.mdx)("thead",{parentName:"table"},(0,i.mdx)("tr",{parentName:"thead"},(0,i.mdx)("th",{parentName:"tr",align:null},"Field"),(0,i.mdx)("th",{parentName:"tr",align:null},"Type"),(0,i.mdx)("th",{parentName:"tr",align:null},"Required"),(0,i.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,i.mdx)("tbody",{parentName:"table"},(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"id"),(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"string")),(0,i.mdx)("td",{parentName:"tr",align:null},"✔️"),(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("strong",{parentName:"td"},"Must be unique")," across all extensions. Consider adding a vendor prefix to this field")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"label"),(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"string")),(0,i.mdx)("td",{parentName:"tr",align:null},"✔️"),(0,i.mdx)("td",{parentName:"tr",align:null},"Button label that will be visible on UI")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"icon"),(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"string")),(0,i.mdx)("td",{parentName:"tr",align:null}),(0,i.mdx)("td",{parentName:"tr",align:null},"Name of a ",(0,i.mdx)("a",{parentName:"td",href:"https://react-spectrum.adobe.com/react-spectrum/workflow-icons.html#available-icons"},"React-Spectrum workflow icon"))),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"subItems"),(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"array")),(0,i.mdx)("td",{parentName:"tr",align:null}),(0,i.mdx)("td",{parentName:"tr",align:null},"A list with sub menu items")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"onClick"),(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"callback(selections): void")),(0,i.mdx)("td",{parentName:"tr",align:null},"✔️"),(0,i.mdx)("td",{parentName:"tr",align:null},"A callback for a button ",(0,i.mdx)("inlineCode",{parentName:"td"},"onClick")," event. Receives list of content fragments selected in the list")))),(0,i.mdx)("h3",{id:"sub-menu-item-api"},"Sub menu item API"),(0,i.mdx)("table",null,(0,i.mdx)("thead",{parentName:"table"},(0,i.mdx)("tr",{parentName:"thead"},(0,i.mdx)("th",{parentName:"tr",align:null},"Field"),(0,i.mdx)("th",{parentName:"tr",align:null},"Type"),(0,i.mdx)("th",{parentName:"tr",align:null},"Required"),(0,i.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,i.mdx)("tbody",{parentName:"table"},(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"id"),(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"string")),(0,i.mdx)("td",{parentName:"tr",align:null},"✔️"),(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("strong",{parentName:"td"},"Must be unique")," across the current button sub menu")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"label"),(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"string")),(0,i.mdx)("td",{parentName:"tr",align:null},"✔️"),(0,i.mdx)("td",{parentName:"tr",align:null},"Button label that will be visible on UI")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"icon"),(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"string")),(0,i.mdx)("td",{parentName:"tr",align:null}),(0,i.mdx)("td",{parentName:"tr",align:null},"Name of a ",(0,i.mdx)("a",{parentName:"td",href:"https://react-spectrum.adobe.com/react-spectrum/workflow-icons.html#available-icons"},"React-Spectrum workflow icon"))),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"onClick"),(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"callback(selections): void")),(0,i.mdx)("td",{parentName:"tr",align:null},"✔️"),(0,i.mdx)("td",{parentName:"tr",align:null},"A callback for a button ",(0,i.mdx)("inlineCode",{parentName:"td"},"onClick")," event. Receives list of content fragments selected in the list")))),(0,i.mdx)("h3",{id:"delete-button-api"},"Delete button API"),(0,i.mdx)("table",null,(0,i.mdx)("thead",{parentName:"table"},(0,i.mdx)("tr",{parentName:"thead"},(0,i.mdx)("th",{parentName:"tr",align:null},"Field"),(0,i.mdx)("th",{parentName:"tr",align:null},"Type"),(0,i.mdx)("th",{parentName:"tr",align:null},"Required"),(0,i.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,i.mdx)("tbody",{parentName:"table"},(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"id"),(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"string")),(0,i.mdx)("td",{parentName:"tr",align:null},"✔️"),(0,i.mdx)("td",{parentName:"tr",align:null},'"id" is a "data-id" attribute of the button (please use browser developer console to find actual value).')))),(0,i.mdx)("h3",{id:"get-list-of-selected-fragments"},"Get List of selected Fragments"),(0,i.mdx)("p",null,"You can access data about the currently selected Content Fragments using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"host.fragmentSelections.getSelections()")," method in an extension."),(0,i.mdx)("h2",{id:"examples"},"Examples:"),(0,i.mdx)("h3",{id:"buttons-conditional-rendering"},"Buttons conditional rendering"),(0,i.mdx)("p",null,"Content Fragment Admin invokes the getButtons method each time a user changes the content fragments selection. Therefore, you can dynamically return different sets of buttons based on the data that has changed on the page.\nFor example:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import { register } from "@adobe/uix-guest";\n\n// ...\n\nconst guestConnection = await register({\n    id: "my.company.extension-with-action-bar-button",\n    methods: {\n        actionBar: {\n            async getButtons() {\n                const selections = await guestConnection?.host?.fragmentSelections?.getSelections?.() || [];\n                const defaultButtons = [\n                    {\n                        id: "default_btn",\n                        label: "Default Button",\n                        onClick(selections) {}\n                    }\n                ]\n\n                if (selections.length > 1 ) {\n                    return [\n                        ...defaultButtons,\n                        {\n                            id: "two_and_more_selected",\n                            label: "Ext two and more selected",\n                        }\n                    ]\n                }\n\n                return [\n                    ...defaultButtons,\n                    {\n                        id: "one_or_less_selected",\n                        label: "Ext one or less selected",\n                    }\n                ]\n            },\n        },\n    },\n});\n')),(0,i.mdx)("p",null,"The defaultButtons constant contains the buttons that will be rendered every time, regardless of the condition.\nOn the line ",(0,i.mdx)("inlineCode",{parentName:"p"},"const selections = await guestConnection?.host?.fragmentSelections?.getSelections?.() || []"),";\nwe get information about the current list of selected content fragments."),(0,i.mdx)("p",null,"Based on the quantity of selected content fragments, we render different sets of buttons."),(0,i.mdx)("p",null,"In case if selected more then one content fragment (",(0,i.mdx)("inlineCode",{parentName:"p"},"selections.length > 1"),') the default buttons and button with id "two_and_more_selected" will be rendered\nIn case if selected just one content fragment the default button and button with id "one_or_less_selected" will be rendered'),(0,i.mdx)("p",null,"This technique allows for building complex logic behind the button rendering."))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-services-aem-cf-console-admin-api-action-bar-index-md-804d5089fb2c2a5fb1a0.js.map