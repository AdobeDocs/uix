{"version":3,"file":"component---src-pages-services-aem-universal-editor-api-commons-index-md-3677213d3f79c277d83d.js","mappings":"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","sources":["webpack://@adobe/uix-docs/./src/pages/services/aem-universal-editor/api/commons/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uix/uix/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"common-concepts-in-creating-extensions\"\n    }}>{`Common Concepts in Creating Extensions`}</h1>\n    <p>{`Understand the fundamentals required to develop an extension for the Universal Editor.`}</p>\n    <h2 {...{\n      \"id\": \"extension-point\"\n    }}>{`Extension Point`}</h2>\n    <p>{`Universal editor has an `}<inlineCode parentName=\"p\">{`universal-editor/ui/1`}</inlineCode>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/app-builder/docs/guides/extensions/\"\n      }}>{`extension point`}</a>{` that allows you to extend its functionality.\nTo declare it to be used by your extension, you need to add the following configuration to your `}<inlineCode parentName=\"p\">{`app.config.yaml`}</inlineCode>{` at the\nroot of your extension:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`extensions:\n  universal-editor/ui/1:\n    $include: src/universal-editor-ui-1/ext.config.yaml\n`}</code></pre>\n    <p>{`Here is an example of `}<inlineCode parentName=\"p\">{`ext.config.yaml`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`operations:\n  view:\n    - type: web\n      impl: index.html\nactions: actions\nweb: web-src\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"extension-registration\"\n    }}>{`Extension Registration`}</h2>\n    <p>{`Interaction between UI Extension and Universal Editor starts with the initialization process that includes extension's\ncapabilities registration so Universal Editor knows when to invoke the extension. Registration is done by `}<inlineCode parentName=\"p\">{`register`}</inlineCode>{`\nmethod provided by `}<inlineCode parentName=\"p\">{`@adobe/uix-guest`}</inlineCode>{` library. This asynchronous method takes single object that describes extension\nand returns object representing connection to the Universal Editor.`}</p>\n    <p>{`Method `}<inlineCode parentName=\"p\">{`register`}</inlineCode>{` should be invoked after extension initialization page is loaded.`}</p>\n    <p>{`Extension registration data must include:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`id`}</inlineCode>{` - string with random extension identifier. This identifier useful for debugging of interaction between Universal\nEditor and extension and needed if extension provides custom UI.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`methods`}</inlineCode>{` - objects with extension code exposed to the Universal Editor console. All methods are grouped into\nnamespaces that represents extension points provided by the Universal Editor.\nCurrently, the following `}<strong parentName=\"li\">{`namespaces`}</strong>{` are available:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><em parentName=\"li\">{`headerMenu`}</em>{`, that allows to add buttons to the header of the Universal Editor;`}</li>\n          <li parentName=\"ul\"><em parentName=\"li\">{`rightPanel`}</em>{`, that allows to add custom content under the rails to the right panel of the Universal Editor;`}</li>\n          <li parentName=\"ul\"><em parentName=\"li\">{`canvas`}</em>{`, that allows to add custom renderer for data types`}</li>\n        </ul>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { register } from \"@adobe/uix-guest\";\n\n// ...\n\n      const guestConnection = await register({\n        id: \"extension-id\",\n        methods: {\n          headerMenu: {\n            getButtons() {\n              // ..\n            }\n          },\n          rightPanel: {\n            getPanels() {\n              // ..\n            }\n          },\n          canvas: {\n            getRenderers() {\n              // ..\n            }\n          }\n        }\n      });\n// ...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"building-extension-ui\"\n    }}>{`Building Extension UI`}</h2>\n    <p>{`In cases where a UI Extension manages data or sends data to a remote service, the register method is the only one expected to be called. If the UI Extension includes its own interface, it should be presented on a separate page. If this interface needs data from the Universal Editor or needs to trigger any logic, it should establish a connection using the attach method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { attach } from \"@adobe/uix-guest\";\n\nconst guestConnection = await attach({ id: \"extension-id\" });\nconst state = await connection.host.editorState.get();\nconst token = await connection.sharedContext.get(\"token\");\nconst model = await connection.host.field.getModel();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"set-up-communication-with-universal-editor\"\n    }}>{`Set up communication with Universal Editor`}</h2>\n    <p>{`Both `}<inlineCode parentName=\"p\">{`register`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`attach`}</inlineCode>{` function of `}<inlineCode parentName=\"p\">{`@adobe/uix-guest`}</inlineCode>{` returns same connection object that has `}<inlineCode parentName=\"p\">{`host`}</inlineCode>{` property and\nexpose API of Universal Editor exposed for UI Extensions. Through this api you can access data from the universal editor as well as send data to it.`}</p>\n    <p>{`Check `}<a parentName=\"p\" {...{\n        \"href\": \"../data\"\n      }}>{`this section`}</a>{` to learn about common concepts on how to achive this `}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}