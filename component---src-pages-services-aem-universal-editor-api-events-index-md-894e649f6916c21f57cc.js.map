{"version":3,"file":"component---src-pages-services-aem-universal-editor-api-events-index-md-894e649f6916c21f57cc.js","mappings":"yRAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,8BAA4B,+BAEpCA,EAAAA,EAAAA,KAAA,iGAA2FA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,eAA6B,6EAClJH,EAAAA,EAAAA,KAAA,MACE,GAAM,gCAA8B,+BAEtCA,EAAAA,EAAAA,KAAA,qEAA+DA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,gBAA8B,aACvHH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,+aAe9BH,EAAAA,EAAAA,KAAA,MACE,GAAM,iBAAe,kBAEvBA,EAAAA,EAAAA,KAAA,MACE,GAAM,oBAAkB,qBAE1BA,EAAAA,EAAAA,KAAA,kQACYA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,UAAwB,+CAClDH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,UAAwB,oEACtCH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,UAAwB,uFAC1EH,EAAAA,EAAAA,KAAA,MACE,GAAM,yBAAuB,2BAE/BA,EAAAA,EAAAA,KAAA,qHACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,0gBAqB9BH,EAAAA,EAAAA,KAAA,gLACAA,EAAAA,EAAAA,KAAA,6HAAuHA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACjI,KAAQ,uIAAqI,yCAC/F,MAGtD,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://@adobe/uix-docs/./src/pages/services/aem-universal-editor/api/events/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uix/uix/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"working-with-custom-events\"\n    }}>{`Working with Custom Events`}</h1>\n    <p>{`The Universal Editor sends defined events to the remote application, on top of this `}<inlineCode parentName=\"p\">{`CustomEvent`}</inlineCode>{` can also be sent directly from the Extension to the remote application.`}</p>\n    <h3 {...{\n      \"id\": \"working-with-custom-events-1\"\n    }}>{`Working with Custom Events`}</h3>\n    <p>{`You can send events to the remote application using the `}<inlineCode parentName=\"p\">{`triggerEvent`}</inlineCode>{` method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`    useEffect(() => {\n        (async () => {\n            const guestConnection = await attach({id: extensionId});\n            ...\n                   await guestConnection.host.remoteApp.triggerEvent('my-custom-event',\n                        'body',\n                        {\n                          example: 'payload'\n                        }\n                    );\n            ...\n        })();\n    }, []);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"api-reference\"\n    }}>{`API Reference`}</h2>\n    <h3 {...{\n      \"id\": \"triggerevent-api\"\n    }}>{`TriggerEvent API`}</h3>\n    <p>{`| Field    | Type                                                                        | Required | Description                                                                                                                   |\n| eventName | `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{` | ✔️ | Name of the event |\n| selector  | `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{` | ✔️ | A valid CSS selector string|\n| payload  | Serializable `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{`| An object that, in addition of the properties defined in the Event Constructor |`}</p>\n    <h3 {...{\n      \"id\": \"subscribing-to-events\"\n    }}>{`Subscribing to events:`}</h3>\n    <p>{`To listen to events sent by the Universal Editor, you can subscribe to them using the next declaration:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`    function ExtensionRegistration() {\n  const init = async () => {\n    const guestConnection = await register({\n      id: extensionId,\n      methods: {\n        events: {\n          listen: (eventName, data) => {\n            console.log(\\`Extension registered to listen to event: \\${eventName}. The event data: \\${JSON.stringify(data)}\\`);\n          }\n        },\n      }\n    });\n\n  };\n  init().catch((error) => console.error(error));\n\n  return <Text>IFrame for integration with Host (AEM)...</Text>\n}\n\n`}</code></pre>\n    <p>{`The extension has the capability to subscribe to a wide range of events offered by the Universal Editor, enabling seamless integration and enhanced functionality.`}</p>\n    <p>{`For a comprehensive list of all available events and the corresponding response interfaces, please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/en/docs/experience-manager-cloud-service/content/implementing/developing/universal-editor/events\"\n      }}>{`Universal Editor Events documentation`}</a>{`. `}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}