{"version":3,"file":"component---src-pages-services-aem-cf-editor-api-index-md-8dea24a276e6549ed6cd.js","mappings":"yRAMaA,EAAe,CAAC,EAKvBC,GAJgBC,EAIY,cAJJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,GAHsBD,MAKtB,MAAMK,EAAc,CAClBP,gBAEIQ,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIR,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,KAACE,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBJ,EAAK,CAAES,WAAYA,EAAYI,QAAQ,eAG5EV,EAAAA,EAAAA,KAAA,MACE,GAAM,iDAA+C,kDAEvDA,EAAAA,EAAAA,KAAA,MACE,GAAM,kBAAgB,mBAExBA,EAAAA,EAAAA,KAAA,mNAA6MA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAG,iBAA+B,iBAAiBX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAG,QAAsB,MACvUX,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,eAAa,yMAS9BX,EAAAA,EAAAA,KAAA,4CACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,eAAa,wiBAc9BX,EAAAA,EAAAA,KAAA,MACE,GAAM,wBAAsB,yBAE9BA,EAAAA,EAAAA,KAAA,wGAAkGA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAG,6CAA2D,6BACvLX,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,eAAa,s2BA2B9BX,EAAAA,EAAAA,KAAA,MACE,GAAM,iBAAe,kBAEvBA,EAAAA,EAAAA,KAAA,kBAAYA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAG,mBAAiC,6KAA6KX,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAG,qCAA+C,aACzTX,EAAAA,EAAAA,KAACL,EAAW,CAACiB,QAAQ,UAAUC,MAAM,OAAOH,QAAQ,iBACpDV,EAAAA,EAAAA,KAAA,2KAGJ,CAEAI,EAAWU,gBAAiB,C","sources":["webpack://@adobe/uix-docs/./src/pages/services/aem-cf-editor/api/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/uix/uix/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"aem-content-fragments-editor-extension-points\"\n    }}>{`AEM Content Fragments Editor Extension Points`}</h1>\n    <h3 {...{\n      \"id\": \"shared-context\"\n    }}>{`Shared Context`}</h3>\n    <p>{`In order to empower UI Extensions perform useful actions Content Fragments Editor provides access to data that simplifies user authentication and usage of AEM API. Such data may be accessed through `}<inlineCode parentName=\"p\">{`sharedContext`}</inlineCode>{` property of `}<inlineCode parentName=\"p\">{`host`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { attach } from \"@adobe/uix-guest\";\n\nconst guestConnection = await attach({\n    id: \"my-id\"\n}\nconst context = guestConnection.sharedContext;\nconst aemHost = context.get(\"aemHost\");\n`}</code></pre>\n    <p>{`Available shared context data:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n    aemHost: string, // hostname of connected AEM environment\n    locale: string, // locale of current user\n    theme: \"light\" | \"dark\", // color schema selected by current user\n    auth: {\n        imsOrg: string, // current IMS organization\n        imsToken: string, // user token\n        apiKey: string, // API key to use for requests to Adobe services\n        imsOrgName: string, // Human readable organization name\n        authScheme: \"Bearer\" // Auth schema that should be used during communication with Adobe services\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"get-content-fragment\"\n    }}>{`Get Content Fragment`}</h3>\n    <p>{`You can access data about the Content Fragment that is currently being edited by using the `}<inlineCode parentName=\"p\">{`host.contentFragment.getContentFragment()`}</inlineCode>{` method in an extension:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { register } from \"@adobe/uix-guest\";\n// ...\nconst init = async () => {\n    const registrationConfig = {\n        id: extensionId,\n        methods: {\n            headerMenu: {\n                async getButtons() {\n                    return [\n                        {\n                            id: \"get-active-cf\",\n                            label: \"Get Active CF / Canvas\",\n                            onClick: async () => {\n                                // Get Content Fragment\n                                const contentFragment = await guestConnection.host.contentFragment.getContentFragment();\n                            },\n                        },\n                    ];\n                },\n            },\n        },\n    };\n    const guestConnection = await register(registrationConfig);\n}\ninit().catch(console.error)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"result-object\"\n    }}>{`Result object`}</h4>\n    <p>{`This `}<inlineCode parentName=\"p\">{`contentFragment`}</inlineCode>{` object holds the last received state from AEM instance. It does not contain recent changes from the Editor (no edits from the canvas, sidebar or changes to variations) `}<strong parentName=\"p\">{`until they are successfully saved`}</strong>{` in AEM.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The API is experimental and might change or disappear at any time. The result object structure is part of a low level API that could be changed in the future.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}