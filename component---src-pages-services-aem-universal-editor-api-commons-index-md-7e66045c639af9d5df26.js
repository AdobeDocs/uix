"use strict";(self.webpackChunk_adobe_uix_docs=self.webpackChunk_adobe_uix_docs||[]).push([[6310],{97137:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return r},default:function(){return p}});var i=t(87462),o=t(45987),a=(t(15007),t(64983)),s=t(91515);const d=["components"],r={},l={_frontmatter:r},m=s.Z;function p(e){let{components:n}=e,t=(0,o.Z)(e,d);return(0,a.mdx)(m,(0,i.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"common-concepts-in-creating-extensions"},"Common Concepts in Creating Extensions"),(0,a.mdx)("p",null,"Understand the fundamentals required to develop an extension for the Universal Editor."),(0,a.mdx)("h2",{id:"extension-point"},"Extension Point"),(0,a.mdx)("p",null,"Universal editor has an ",(0,a.mdx)("inlineCode",{parentName:"p"},"universal-editor/ui/1")," ",(0,a.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/app-builder/docs/guides/extensions/"},"extension point")," that allows you to extend its functionality.\nTo declare it to be used by your extension, you need to add the following configuration to your ",(0,a.mdx)("inlineCode",{parentName:"p"},"app.config.yaml")," at the\nroot of your extension:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-yaml"},"extensions:\n  universal-editor/ui/1:\n    $include: src/universal-editor-ui-1/ext.config.yaml\n")),(0,a.mdx)("p",null,"Here is an example of ",(0,a.mdx)("inlineCode",{parentName:"p"},"ext.config.yaml")," file:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-yaml"},"operations:\n  view:\n    - type: web\n      impl: index.html\nactions: actions\nweb: web-src\n")),(0,a.mdx)("h2",{id:"extension-registration"},"Extension Registration"),(0,a.mdx)("p",null,"Interaction between UI Extension and Universal Editor starts with the initialization process that includes extension's\ncapabilities registration so Universal Editor knows when to invoke the extension. Registration is done by ",(0,a.mdx)("inlineCode",{parentName:"p"},"register"),"\nmethod provided by ",(0,a.mdx)("inlineCode",{parentName:"p"},"@adobe/uix-guest")," library. This asynchronous method takes single object that describes extension\nand returns object representing connection to the Universal Editor."),(0,a.mdx)("p",null,"Method ",(0,a.mdx)("inlineCode",{parentName:"p"},"register")," should be invoked after extension initialization page is loaded."),(0,a.mdx)("p",null,"Extension registration data must include:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"id")," - string with random extension identifier. This identifier useful for debugging of interaction between Universal\nEditor and extension and needed if extension provides custom UI."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"methods")," - objects with extension code exposed to the Universal Editor console. All methods are grouped into\nnamespaces that represents extension points provided by the Universal Editor.\nCurrently, the following ",(0,a.mdx)("strong",{parentName:"li"},"namespaces")," are available:",(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("em",{parentName:"li"},"headerMenu"),", that allows to add buttons to the header of the Universal Editor;"),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("em",{parentName:"li"},"rightPanel"),", that allows to add custom content under the rails to the right panel of the Universal Editor;"),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("em",{parentName:"li"},"canvas"),", that allows to add custom renderer for data types")))),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-js"},'import { register } from "@adobe/uix-guest";\n\n// ...\n\n      const guestConnection = await register({\n        id: "extension-id",\n        methods: {\n          headerMenu: {\n            getButtons() {\n              // ..\n            }\n          },\n          rightPanel: {\n            getPanels() {\n              // ..\n            }\n          },\n          canvas: {\n            getRenderers() {\n              // ..\n            }\n          }\n        }\n      });\n// ...\n')),(0,a.mdx)("h2",{id:"building-extension-ui"},"Building Extension UI"),(0,a.mdx)("p",null,"In cases where a UI Extension manages data or sends data to a remote service, the register method is the only one expected to be called. If the UI Extension includes its own interface, it should be presented on a separate page. If this interface needs data from the Universal Editor or needs to trigger any logic, it should establish a connection using the attach method."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-js"},'import { attach } from "@adobe/uix-guest";\n\nconst connection = await attach({ id: "extension-id" });\nconst state = await connection.host.editorState.get();\nconst token = await connection.sharedContext.get("token");\nconst model = await connection.host.field.getModel();\n')),(0,a.mdx)("h2",{id:"set-up-communication-with-universal-editor"},"Set up communication with Universal Editor"),(0,a.mdx)("p",null,"Both ",(0,a.mdx)("inlineCode",{parentName:"p"},"register")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"attach")," function of ",(0,a.mdx)("inlineCode",{parentName:"p"},"@adobe/uix-guest")," returns same connection object that has ",(0,a.mdx)("inlineCode",{parentName:"p"},"host")," property and\nexpose API of Universal Editor exposed for UI Extensions. Through this api you can access data from the universal editor as well as send data to it."),(0,a.mdx)("p",null,"Check ",(0,a.mdx)("a",{parentName:"p",href:"../data"},"this section")," to learn about common concepts on how to achive this "))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-services-aem-universal-editor-api-commons-index-md-7e66045c639af9d5df26.js.map